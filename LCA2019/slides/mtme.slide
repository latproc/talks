Clockwork
	Clockwork And Its Tools - Open Source Software to make things more easily
	Mike O'Connor

Latproc Team

	Mike O'Connor
		the person with the know-how 
		the person with the need

	Martin Leadbeater
		@mleadbeater
		the helpful designer/programmer

	-- I'm Mike O'Connor, I have been involved in industrial
	-- automation through my family business for all of my
	-- working life.

	-- I have been involved in a wide range of networking and
	-- other project and consistenly turned to Linux and Open
	-- Souce Software for my projects

	-- Martin and I worked on a C++ based program for
	-- one of our machines 20 years ago and we started
	-- working together again around 2010 on an application 
	-- monitoring system for embedded linux

	-- Since 2012, Martin has been the main developer
	-- of the tools we are talking about today.

Latproc Projects
	clockwork - language and main toolset
	&nbsp;&nbsp;https://github.com/latproc/clockwork<br/>
	scope - an event sampler and terminal oscilloscope
	&nbsp;&nbsp;https://github.com/latproc/scope<br/>
	humid - Human Interface Daemon
	&nbsp;&nbsp;https://github.com/latproc/humid<br/>
	clockwork_esp32 - ESP32/FreeRTOS runtime
	&nbsp;&nbsp;https://github.com/latproc/clockwork_esp32

	-- clockwork - language and main toolset

	-- scope - an event sampler and terminal oscilloscope

	-- humid - Human Interface Daemon

	-- clockwork_esp32 - ESP32/FreeRTOS runtime

latproc 
	Language And Tools for Process Control
		First published 2012
	-- LATPROC project is used for process control of hydraulic and pneumatic machinery.

	-- Developed initially for Wooltech Wool Sampling machines
		Linux Framework
	-- Frameworks for Linux and FreeRTOS
		FreeRTOS Framework (tested on ESP32)
		Open Source under BSD and GPL
	-- Release under BSD and GPL Licences

Original Design Capabilities
	Industrial IO (real world connections)
		BeckHoff EtherCAT(tm) based control
	-- Current able to interface to Ethercat Industrial Hardware

	-- Very high speed update rates
	Humid (Human Machine Interface)
	-- Human Interface Device
	-- OpenGL bases
	-- Text Readable config
	Protocols
	-- Number of protocols both industrial in nature and custom using TCP/IP and plugins
		Modbus master/slave
			- Modbus TCP/IP and RTU (Serial)
		Raw TCP/IP and serial UART (device_connector)
		Plugins
			- libcurl
			- exec system
		MQTT - IoT protocol

What it was developed for
	<div style="height:450px;"><img height=450px src="img/MosesInfeedFrontRHV2.jpg"></div>

What it was developed for
	<div style="height:450px;"><img height=450px src="img/down_the_middle.jpg"></div>

# example of embedding a local video in the browser
#Video example 1
#	<a href="/img/gnome.mp4">A gnome</a>
#
# example of embedding a youtube video
#Video example
#  <iframe data-src="http://localhost:8000"></iframe>
#  <video>
#    <source data-src="/img/gnome.mp4" type="video/mp4" />
#  </video>


Clockwork
	The latproc language
	Objects are called Machine's
	Describe Machines by their states
	States are selected by evaluating rules
	All Machines run continuously in parallel
	Machines monitor selves and each other

	-- different programming style, more like modelling

	-- we build code that describe what 
	-- things do, for example: a door is open or closed or 
	-- maybe opening or closing. 

	-- a glass might be half full...

	-- programming is more like connecting pieces together

	-- we think about sequences as changes between states
	-- not steps from one action to another.

	-- Generally our actions in a state a very small

Language Features
	Rule based
	Automatic state selection
	No Loop statements
	Highly reusable code

	-- Key features that distinguish our clockwork language
	-- It uses rules to automatically
	-- decide what state parts of a system are in.

	-- It is highly parallel and since clockwork components
	-- run continuously there is no need for loops

	-- We find that the components we build tend to be 
	-- easy to reuse.

Defining state machines
	###
	Light MACHINE {
		on STATE;
		off INITIAL;
	}
	light Light;

	###
	Simple machine
	No automation
	Controlled externally
	'MACHINE' is a bit like a 'Class'
	Instantiate a MACHINE to use it in a program

	-- this describes a machine that can be on or off, initially it is off

	-- This machine does not have any automation, it has to be
	-- controlled externally by directly setting its state.

Using transitions

	###
	ToggleSwitch MACHINE {
		on STATE;
		off INITIAL;

		TRANSITION on TO off USING next;
		TRANSITION off TO on USING next;
	}
	###
	Basic automation via transitions
	Flips state when 'next' message is received

	-- this dscribes a machine that can receive a message called: 'next'

	-- if this machine receives the message, when it is on, it turns off.
	-- Similarly, if it was off when the message arrives, it turns on.

	-- repeatedly sending the next message will cause the machine to
	-- toggle between on and off

Situation Normal
	MACHINEs can have STATEs
	TRANSITIONS can cause STATEs to change
	Nothing special so far...

	-- this is all very common and is what all state-based programming
	-- is like. Essentially, transitions are used to respond to 
	-- events and programming using state machines is all about 
	-- sending and responding to events.

	-- Clockwork is not like this and actually we rarely use the
	-- TRANSITION statement.

State Monitoring
	Our name for this programming style
	State Machines are a common technique
	State Machines focus on events and transitions
	State Monitoring is about states and rules

	-- Our name for this programming style

	-- State Machines are a common technique

	-- State Machines focus on events and transitions

	-- State Monitoring is about states and rules

Using rules

	###
	Blinker MACHINE {
		on WHEN SELF IS off;
		off DEFAULT;
	}
	###
	Automatic state selection
	Rules (WHEN statements) are continuously checked
	Evaluates rules in sequence
	Stops at the first rule that is true

	-- here is a machine that has two states, 'on' and 'off'

	-- the 'on' state has a rule given by the WHEN clause

	-- the machine continuously evaluates its rules and none of them
	-- match (that is, if none of them evaluate as 'TRUE') then
	-- the machine sets itself into the DEFAULT state.

	-- Looking at the rule on this machine, we see that whenever
	-- the machine is 'off', the rule for the 'on' state is TRUE
	-- so the machine turns on. 

	-- If the machine is on, the rule 'SELF IS off' is no longer true so
	-- the machine cannot stay in the 'on' state. Since there are
	-- no other states, the machine goes to 'off'

Controlling things

	###
	LightSwitch MACHINE switch, light {
		on WHEN switch IS on;
		off DEFAULT;

		ENTER on  { SET light TO on; }
		ENTER off { SET light TO off; }
	}

	###
	Controls 'light' based on the state of 'switch'
	Rules (WHEN statements) are continuously checked
	ENTER functions are processed when a state changes
	The SET statement tells a machine to change state

	-- When a machine changes state, it check to see if it has to do anything
	-- by looking for an ENTER statement for the new state. 

	-- In this example, we are controlling a light using about
	-- switch.

	-- When the switch is turned on, this controller turns the light on.

	-- In clockwork, the switch and the light could be other software 'MACHINE's or
	-- they could represent hardware devices, such as switches, beams or proximity sensors
	-- They might even represent the value of a topic in an IoT device.

No Loops or Ifs?

	###
	Counter MACHINE {
		OPTION count 0;

		counting_up WHEN count < 10;
		idle DEFAULT;

		ENTER counting_up { count := count + 1; }
	}

	###
	This machine enters 'counting_up' whenever count < 10
	When it enters 'counting_up' the machine adds one

	-- There is no while statement, for statement or repeat statement in clockwork
	-- everything is accomplished with state changes.

	-- In this example, we show a machine that counts up to 10 without a loops

	-- Actually this example has a bug. When the machine starts its count property is set to zero.
	-- The rules are checked and 'count < 10' is true so the machine enters the 'up' state

	-- When the machine enters the up state, it adds one to count.

	-- Next time the rules are evaluated, count is still < 10 to the machine stays
	-- in the 'up' state.

	-- Since it has already entered the 'up' state, the machine does not execute the
	-- ENTER function for 'up' so the machine is stable and sits in the 'up' 
	-- state forever.


No If statements?

	###
	Counter MACHINE {
		OPTION count 0;
		up WHEN count < 10;
		idle DEFAULT;

		ENTER up { 
			count := count + 1;
			IF count < 10 { SET SELF TO idle; }
		}
	}
	###

	An ugly fix to the error in the rules

	-- actually, clockwork has if statements but we almost never use them

	-- this example fixes the previous bug using an IF statement.

	-- usually if we think we need to use an if statement, we haven'that
	-- got the rules right.

Counting up

	###
	Counter MACHINE {
		OPTION count 0;
		up WHEN SELF IS idle AND count < 10;
		idle DEFAULT;

		ENTER up { count := count + 1; }
	}

	###
	A nicer fix to the previous bug
	Generally avoid using IF, use rules instead

	-- this example fixes the bug in the previous example.

	-- note that it is a lot cleaner and doesn't need an if statement

Reusing components

	###
	LightSwitch MACHINE switch, light {
		on WHEN switch IS on;
		off DEFAULT;

		ENTER on  { SET light TO on; }
		ENTER off { SET light TO off; }
	}

	###
		Passing machines as parameters links them
		switch and light are available to LightSwitch
		LightSwitch can monitor the state or properties of linked machines

	-- When machine are linked together, it is important to make
	-- sure that they have the states and properties that are used in 
	-- all of the rules and ENTER functions

	-- for example, the machine passed to the LightSwitch must have a state 
	-- called 'on' so it can be test in the rules.

	-- similarly, the machine connected as 'light' must have an 'on' state and an 'off' state
	-- It may have other states of its own also but LightSwitch doesn't care about that.

	-- It turns out that this simple way of connecting machines to each other this
	-- way means a component (such as this LightSwitch) can be placed in a 
	-- library and reused


Controlling multiple things at once

	###
	LightController MACHINE lights {
		COMMAND on  { SEND turnOn TO lights; }
		COMMAND off { SEND turnOff TO lights; }
	}

	front_porch Light;
	garden Light;
	yard_lights LIST front_porch, garden;

	controller LightController yard_lights;

	###
	A LIST 'machine' can hold several other machines
	When a message is sent to a LIST it is redirected to the members

	-- this example shows how some lights can be built into a list and
	-- that list can be connected to a controller machine

	-- when a message is sent to a LIST, the message is actually
	-- sent to all of the devices built into the LIST

Clockwork code real-world example
	Wool bales being cored
	<iframe width="700" height="393" src="https://www.youtube.com/embed/OPTpqycOI6g" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

	-- Controlling lights is just the beginning :)

	-- Here is a video showing how it is used in industry

A comparison of programming styles
	Programming blinking LEDs in C and Clockwork

	Blinking LEDs - the hello world of hardware

	Programming hardware starts easy but gets hard

	-- Blinking LEDs is the hello world of hardware.

	-- I'd like to show how easy it is to do that with C and with Clockwork

	-- The problem is that programming gets harder quickly

	-- We are trying to fight that issue, hopefully an example will help

Blink a LED
	<div style="float: left; width: 500px;">
	### overflow: auto;
int pin = 6;
byte level = HIGH;
void setup() {
  pinMode(pin, OUTPUT);
  digitalWrite(pin, level);
}

void loop() {
  level = (level == LOW) ? HIGH : LOW;
  digitalWrite(pin, level);
  delay(500);
}
	###
	</div>
	<div style="float: left;  width: 450px; ">
	### overflow: auto;
Blink MACHINE pin {
  on WHEN SELF IS off;
  off DEFAULT;
  ENTER on { 
	SET pin TO on;
	WAIT 500;
  }
  ENTER off { 
	SET pin TO off;
	WAIT 500;
  }
}
cpu ESP32;
led OUTPUT cpu, cpu.GPIO22; 
blinker Blink led;

	###
	</div>
	<div style="clear:both"></div>
	A barebones example of code in C for Arduino and in Clockwork for ESP32

	-- both programs have a fair bit of code just defining the
	-- connection to the LEDS and preparing the hardware

	-- both of these examples could be shortened by hiding more details
	-- away in libraries but we are trying to show how Clockwork
	-- programming is a lot more like describing the machines than 
	-- normal programming is.

Add more LEDS
	<div style="float: left; width: 500px; height:400px; overflow: scroll; zoom: 50%">
	###
typedef struct {
  int pin;
  unsigned long last_time;
  byte level;
  int wait_time;
} Led;

Led pins[] = {
  {. pin = 6, .last_time = 0, .level = LOW, .wait_time = 500},
  {. pin = 7, .last_time = 0, .level = LOW, .wait_time = 350},
  {. pin = 8, .last_time = 0, .level = LOW, .wait_time = 650}
};

void setup() {
  int i;
  unsigned long now = millis();
  for (i=0; i<3; ++i) {
    pinMode(pins[i].pin, OUTPUT);
    digitalWrite(pins[i].pin, pins[i].level);
    pins[i].last_time = now;
  }
}

void loop() {
  int i;
  unsigned long now = millis();
  for (i=0; i<3; ++i) {
    if (now - pins[i].last_time >= pins[i].wait_time) {
      pins[i].last_time = now;
      pins[i].level = (pins[i].level == LOW) ? HIGH : LOW;
      digitalWrite(pins[i].pin, pins[i].level);
    }
  }
}
	###
	</div>
	<div style="float: right; width: 500px; height:400px; overflow: scroll; zoom: 50%;">
	###
Blink MACHINE pin {
  OPTION wait_time 500;
  on WHEN SELF IS off;
  off DEFAULT;
  ENTER on { 
	SET pin TO on;
	WAIT wait_time;
  }
  ENTER off { 
	SET pin TO off;
	WAIT wait_time;
  }
}
cpu ESP32;
pin1 OUTPUT cpu, cpu.GPIO22; 
pin2 OUTPUT cpu, cpu.GPIO23; 
pin3 OUTPUT cpu, cpu.GPIO24; 
blinker1 Blink(wait_time: 500) pin1;
blinker2 Blink(wait_time: 350) pin2;
blinker3 Blink(wait_time: 650) pin3;
	###
	</div>

	Not a big change in the requirements
	Quite a lot of code changes in C
	<div style="clear:both"></div>

	-- Our objective with Clockwork is to make
	-- it as simple to program by building
	-- reusable models with code.

A nicer version 
	We rarely use the WAIT statement
	###
Blink MACHINE pin {
  OPTION wait_time 500;
  on WHEN SELF IS off AND TIMER >= wait_time;
  on WHEN SELF IS on AND TIMER <= wait_time;
  off DEFAULT;
  ENTER on  { SET pin TO on;  }
  ENTER off { SET pin TO off; }
}
	###
	Rules can be split so they can be expressed naturally
	<q>If you've been off for 500ms or more, turn on</q>
	<q>If you're on stay that way for 500ms</q> 
	We like to keep the ENTER functions small

	-- This version has two different reasons
	-- for the LED to be on:

	-- it might be off and have been that way for plenty of time
	-- it might be on already but hasn't been on for very long so it stays on

Tools
	iod - main EtherCAT control daemon
	cw - local interpreter daemon
	iosh - terminal shell
	sampler - monitoring and logging
	persistd - monitor and retain persistend state
	modbusd - bridge to modbus masters (panels)
	device connector - bridge to TCP/IP or serial devices

Tools
	iosh
	### overflow:auto; height:100%; font-size:0.6em;
> DESCRIBE O24V_GrabControlFan ;
---------------
O24V_GrabControlFan: off  Class: POINT 
 instantiated at: /opt/latproc/code/config/config.lpc line:94
  parameter 1 module (EL2828_01), state: OP
  parameter 2 1 ()

 io: readtime: 185932 [Channel 2 Output, 1 0:1.1]=0 (0)
Exports:
  O24V_GrabControlFan
  published (1)
Listening to: 
  EL2828_01[123]:   OP

Dependant machines: 
  L_Inputs[399]:   nonempty
  M_ControlFan[580]:   off

properties:
  NAME:O24V_GrabControlFan, STATE:off, export:0, tab:Outputs, type:Output, wire:Y52

Timer: 20713486

>
	###

Tools
	sampler
	###
443391 M_CO2 idle
443891 M_CO2 update
443892 XA_CO2 CO2_Level 496
443892 XA_CO2 message 496
443892 M_CO2 idle
	###
	-- sampler captures a stream of state and property changes
	-- extermally effective debug tool
	-- save sampler output and use grep etc

User Interface Tools 
	Web UI - basic web application for monitoring and control
	humid - GUI development tool
		Buttons (toggle, momentary)
		Text and Number Entry Fields
		Page switching
		Element visablity control
		Time series graphing
	web 3D visualisation - render a model in 3D
	scope - character based graphing for sampler 

	-- The original user interface we a basic web page that 
	-- displayed the status of the IO on separate tabs, 
	-- for example a tab for Inputs and one for Outputs
	-- Each Clockwork machine can have a parameter that
	-- indicates where it's status should be displayed.

	-- Lately we have been using a new tool, Humid, that
	-- provides standard user interface tools and
	-- also includes features for real-time graphing
	-- of time-series data and can display images
	-- from web cameras or other sites.

	-- We have demonstrated how to render and control
	-- 3D models of the machinery but this is not
	-- something we do for normal user interfaces

Embedding clockwork
	Automatically translate user code to C
	Provides a runtime framework
	Limited set of features currently built
	Intending to support Arduino (AVR ATmega) devices
	Intending to support other low power devices
	Working on better integration with our Linux based toolset


	-- We have had a fair bit of success embedding 
	-- clockwork code into a small device.

	-- This is still a work in progress so we 
	-- have features for basic applications but
	-- we are activelty trying to complete 
	-- the feature set.

Embedded feature set
	Basic runtime working
	No string processing
	No floating point calculations
	No iosh, debug is via mosquitto_pub/sub
	Humid not yet supported

	-- The embedded code currently can't do floating point
	-- calculations or pattern matching with strings

	-- We have only basic debugging and event logging via MQTT

	-- Our humid graphical editor does not currently talk to MQTT


Build process
	<div style="float: left; width: 30%; height:500px; overflow: scroll;">
	Command based
	Work from clockwork source directory
	###

cd my-project
build_esp32 [-f]

	###
	</div>
	<div style="float:right; position:absolute; top:0px; right:0px;">
	<img height=500px; src="img/esp32-parts.png" />
	</div>

	-- The build process takes a bit to install initially
	-- but is not too bad once setup.

	-- The diagram shows how various code components are 
	-- pulled together to produce the final image.

Open Source components
	Linux, GNU compiler suite
	cJSON, libmodbus, ZeroMQ
	EtherLAB, libXML, three.js
	nanogui, glfw
	etc.,

	-- these are some of the Open Source tools we use within the latproc tool set

Bugs and Issues
	Not enough documentation
	Numerous small issues 
	Inter-clockwork channels needs more work
		Shadowing machines
		Startup issues when components restart
	Some language features need clarification

Application to FPGAs
	Can do some high-level digital simulation
	One day we would like to program FPGAs
	An example: 4-bit counter:
	<div style="float:right;" width:45%><img width=400px; src="img/binary_counter_2.png"></img></div>
	### float:left; width:45%; font-size:0.3em;
Pulser MACHINE {
	OPTION delay 1000;
	on WHEN TIMER > delay;
	off DEFAULT;
}
TFF MACHINE in {
	on STATE; off INITIAL;
	RECEIVE in.off_enter { SEND next TO SELF; }
	TRANSITION on TO off ON next;
	TRANSITION off TO on ON next;
}
pulse Pulse;
one TFF pulse;
two TFF one;
three TFF two;
four TFF three;
	###
	<div style="clear:both"></div>

	-- A Flip Flip is a device that holds itself in on state or another

	-- A TFF flips state when it gets a pulse from an Inputs

	--In this example we are passing the clock pulse into the first TFF

	-- We pass the output of the first TFF into the second and so on


Monitoring with Sampler
	Using the 4-bit counter example
	sampling to watch the flip flop changes
	<div style="float:right;" width:40%><img width=400px; src="img/binary_truth.png"></img></div>
	### float:left; width:40%; font-size:0.2em;
11150	one	off
11152	two	off
11156	three	off
11160	four	off
11174	monitor.VALUE	value	0
12159	one	on
12188	monitor.VALUE	value	1
13166	one	off
13169	two	on
13192	monitor.VALUE	value	2
14172	one	on
14198	monitor.VALUE	value	3
15178	one	off
15181	two	off
15185	three	on
15207	monitor.VALUE	value	4
16190	one	on
	###

	-- Here is an example of monitoring with sampler

	-- In this case we have used a filter to only show our flip flops and the result

	-- Every state or property change appears in the log

	-- the table on the right shows how the binary state of the flip flops 
	-- translates to a numeric value.

Convert 4-bits to a number
	Machines can be placed in a List
	A List can interpret the on-off state of its members to create a BITSET
	A BITSET can be interpreted as a number
	BITSETS can be saved and loaded and used to initialise members of list to a known state.
	###
res LIST four, three, two, one;
Monitor MACHINE list {
  OPTION VALUE 0;
  update WHEN VALUE != BITSET FROM list;
  idle DEFAULT;
  ENTER update { WAIT 20; VALUE := BITSET FROM list; }
}
monitor Monitor res;
	###
	-- The 'monitor' in the previous example is a clockwork machine
	-- that takes a list of inputs and uses BITSET to interpret the states as a value
	
	-- the WAIT statement give time for the rippling of state changes to
	-- stabilise before outputing the value.

Future
	We are continuing to develop and refine the language
	Tools are developed as we need them
	Will use the compiler technology on Linux
	Lots of other ideas on the drawing board
	We would like to help others use the tool set

	-- Our tool set has been getting gradually more 
	-- powerful and as we use clockwork
	-- we find new areas that it seems to be applicable

	-- So far we haven't been able to build a community
	-- and so our development rate is pretty slow

	-- The best way to improve the tools is to
	-- use them and we are keen to help

Questions or comments
	clockwork - language and main toolset
	&nbsp;&nbsp;https://github.com/latproc/clockwork<br/>
	scope - an event sampler and terminal oscilloscope
	&nbsp;&nbsp;https://github.com/latproc/scope<br/>
	humid - Human Interface Daemon
	&nbsp;&nbsp;https://github.com/latproc/humid<br/>
	clockwork_esp32 - ESP32/FreeRTOS runtime
	&nbsp;&nbsp;https://github.com/latproc/clockwork_esp32

Questions or comments
	Latproc - Language and Tools for Process Control
		https://github.com/latproc

	<iframe width="560" height="315" src="https://www.youtube.com/embed/KOCRodkhn7E" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

